{
  
    
        "post0": {
            "title": "Lesson 3 - A first function",
            "content": "About . In this notebook, you will learn to make your first function in Python. . In order to run the scripts in this notebook, click on the launch in binder or open in Colab buttons - wait for a while, this may take some time. Once the notebook is loaded, you can execute scripts in each cell by hitting SHIFT + ENTER . Functions explanation . Functions are a group of statements that will perform a specific task, this is especially useful for repetitive tasks for which you need a stable output . functions can be combined with loops, which makes programming languages especially powerful . Functions example . One of the most famous first functions is &quot;Hello World&quot;, below is an example of such a function. The function name is greet but you can enter any name you like . def greet(name): &quot;&quot;&quot; This function greets to the person passed in as a parameter &quot;&quot;&quot; print(&quot;Hello, &quot; + name + &quot;. Good morning!&quot;) . . Functions exercise 1 . Question 1 Enter your name in the function and hit SHIFT + ENTER so that it greets you . greet(&quot;world&quot;) . Hello, world. Good morning! . Functions exercise 2 . As mentioned before, you can combine loops and functions. . Question 2 have the function greet multiple people: . step 1:create a list of names&gt; step 2:create a loop &gt; step 3:add the function to the loop If you&#39;re struggling, the answer is hidden below . list_of_names = [&quot;pingu&quot;, &quot;all&quot;, &quot;creativeTuition&quot;] for name in list_of_names: greet(name) . . Hello, pingu. Good morning! Hello, all. Good morning! Hello, creativeTuition. Good morning! .",
            "url": "https://fvanden.github.io/PyPenguin/fastpages/jupyter/2021/06/29/Lesson3.html",
            "relUrl": "/fastpages/jupyter/2021/06/29/Lesson3.html",
            "date": " • Jun 29, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Lesson 2 - the concept of loops",
            "content": "About . In this notebook, you will learn the basic concept of loops in Python. . In order to run the scripts in this notebook, click on the launch in binder or open in Colab buttons - wait for a while, this may take some time. Once the notebook is loaded, you can execute scripts in each cell by hitting SHIFT + ENTER . Let&#39;s start with a game... . go to this page it will take some time to load, but eventually you will see an image similar to the one below . while you move, the image may flicker.. please take care and if this bothers you, skip the exercise . . matrix introduction exercise . Question 1 Note down the number of moves you made and in what order. For example, 2 times left then 2 times down etc. . You should notice that the moves are quite repetitive. There might be an easier way to navigate over the ice sheet, without having to repeat the moves each time. In programming we use loops to execute repetitive actions. The next exercise will illustrate what a loop is. . loops explanation . In Python, loops are used to perform repetitive actions. . there are two major types of loops in Python:FOR loops and WHILE loops. Here, we will look at the FOR loop first . loops example . In the previous example, you moved right twice, then down twice first. In the code below, these actions have been embedded in Python loops (Note that the text is just printed out). . Question 2 See if you can add extra lines to the script to make the other moves print out correctly . for i in range(0,2): print(&quot;move right&quot;) for i in range(0,2): print(&quot;move down&quot;) . move right move right move down move down .",
            "url": "https://fvanden.github.io/PyPenguin/fastpages/jupyter/2021/06/29/Lesson2.html",
            "relUrl": "/fastpages/jupyter/2021/06/29/Lesson2.html",
            "date": " • Jun 29, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Lesson 1 - values, arrays and matrices",
            "content": "About . In this notebook, you will learn the difference between values, arrays and matrices used in Python. . In order to run the scripts in this notebook, click on the launch in binder or open in Colab buttons - wait for a while, this may take some time. Once the notebook is loaded, you can execute scripts in each cell by hitting SHIFT + ENTER . values, arrays and matrices . Imagine your colleague is counting penguins on an ice floe, the number of penguins she counts on that floe will be a value . If your colleague is counting penguins on several different ice floes, she will end up with a list of values or an array . Finally, if your colleague is counting penguins using still satellite images from space, she might decide to divide the image into boxes of equal sizes and count the number of penguins in each box. She will end up with a list of lists in either the horizontal or vertical direction. Such a list of lists is also called a matrix . value explanation . In Python, there are different Data Types : such as numbers (integers, floats and complex), strings and boolean values. . if your colleague is counting the number of penguins on an ice floe, she will end up with a number like 1, 4 or 10. This is called an integer , because it is a whole number . if your colleague decides to divide the ice floe into boxes and count the number of penguins in each box, she might find a penguin sitting on the edge between two boxes. She can then decide to say that there are 0.5 penguins in that box. Any number with a fraction (for example 2.3, 1.6778 etc,) is called a floating point number or a float . complex numbers are beyond the scope of this tutorial, for more information see this explanation if your colleague decides to give each penguin a name, she might note these downs. Values which are sequences of characters are called strings in Python . Finally, if your colleague is only interested in whether or not there are any penguins sitting on an ice floe, she might only note down True (there are penguins) or False (there are no penguins). This is called a boolean value . value example . value exercise 1 . Python can let you know what the type is of the value that you&#39;re looking at. In the example below, change the value to: . a float (i.e. 2.5) | a string (i.e. &quot;Pingu&quot;) NOTE: you have to put a string in parentheses! | a boolean value (i.e. True) | . Click on the box and remember to hit SHIFT + ENTER to execute the code . type(True) . bool . value exercise 2 . Depending on whether your Data Type is an integer, float or boolean value, there are certain operations that you can or can not perform. Operations include multiplication *, division /, addition +, subtraction - and exponentiation ** . Try some operations on different data types below. . Question 1a what happens when you multiply a string value? (i.e. &quot;Penguin&quot;)? . Question 1b what happens when you divise a string value? (i.e. &quot;Penguin&quot;)? . Question 2a what happens when you multiply or divise a boolean value? (i.e. True)? Note: type True without parenthesis, but with a capital letter . Question 2b what does this tell you about the value of True? . Question 3 (bonus) what is the value of False? . &quot;Penguin&quot; *2 . &#39;PenguinPenguin&#39; . array explanation . Remember that your colleague might want to note down the number of Penguins at different sites or locations. This would result in a list of values . . If all the values in the list are of the same Data Type (integer, float etc) we call it an array . . The position of a value in a list or array is called an index , indices can help you query lists to find the a value at a specific location. If your colleague for example wanted to know what the number of penguins at location 3 were, she could would need to consult the value of the 3rd index . Note:in Python, the first index is 0. This means that if you want to know the 3rd value in your list, you need to consult index 2. This is different for different programming languages. . array example . array exercise . In the code below, an array is created which is called locations_list (you can click Show code to see it). . You can see the length of a list (the total number of locations) by typing len(locations_list) . Question 4a what is the length of the locations list? . You can also find the values of the number of penguins found at each location. In the example below, the value for the first location is obtained by typing (locations_list[0]). . Question 4b change the code to extract the number of penguins at the 3rd location, what is the value? . There is another list called penguin_names . By changing the code in either of the boxes below, try to find: . Question 5b The length of the list with penguin_names . Question 5b All of the values in the list . locations_list = [7,8,5,10,12,3,9,18,8,4] . . len(locations_list) . 10 . locations_list[0] . 7 . matrix explanation . Finally, if your colleague is interested in counting penguins using satellite images, she might divide the image into boxes of equal sizes and count the number of penguins in each box. A list of lists is called a matrix . . Like with arrays or lists, matrix indices start at 0 in Python. By convention, row indices come first in Python . matrix example . matrix exercise . In the code below, a matrix is created which is called locations_matrix (you can click Show code to see it). . You can see the matrix by typing the name and hitting SHIFT + ENTER or the shape of the matrix by typing locations_matrix.shape . Finally, you can see the value of the upper left hand corner of the matrix (or first row, first column) by typing locations_matrix[0][0] . Question 6 what is the value of the bottom right hand corner of the matrix (last row, last column)? . locations_matrix = np.array([[7,8,5],[10,12,3],[9,18,8]]) . . locations_matrix . array([[ 7, 8, 5], [10, 12, 3], [ 9, 18, 8]]) . locations_matrix.shape . (3, 3) . locations_matrix[0][0] . 7 .",
            "url": "https://fvanden.github.io/PyPenguin/jupyter/2021/06/29/Lesson1.html",
            "relUrl": "/jupyter/2021/06/29/Lesson1.html",
            "date": " • Jun 29, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://fvanden.github.io/PyPenguin/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About PyPenguin",
          "content": "Using Penguins and everything Polar to introduce programming in Python.. . More to come.. .",
          "url": "https://fvanden.github.io/PyPenguin/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://fvanden.github.io/PyPenguin/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}